{"version":3,"sources":["styles/dist/TodoItem.module.css","styles/dist/App.module.css","styles/dist/Form.module.css","styles/dist/TodoItemList.module.css","styles/dist/Filter.module.css","components/Form.jsx","components/TodoItem.jsx","components/TodoItemList.jsx","components/Filter.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Form","props","input","React","createRef","className","s","wrapper","type","placeholder","ref","value","inputValue","onChange","text","current","changeInputValue","onClick","addTodo","TodoItem","id","toggleCompleting","completed","isCompleted","name","right","lightgreen","status","lightred","deleteButton","removeTodo","TodoItemList","itemArray","todos","forEach","todo","filter","push","Filter","toggleFilter","checked","App","useState","setTodos","setFilter","setInputValue","Date","now","row","e","target","map","index","findIndex","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5034c61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TodoItem_wrapper__2z8Bl\",\"name\":\"TodoItem_name__1Goxa\",\"right\":\"TodoItem_right__3rnbQ\",\"status\":\"TodoItem_status__2CWqk\",\"deleteButton\":\"TodoItem_deleteButton__3Bl0L\",\"completed\":\"TodoItem_completed__2Z_Yj\",\"lightgreen\":\"TodoItem_lightgreen__W-CTc\",\"lightred\":\"TodoItem_lightred__2uqYJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__3TAJt\",\"row\":\"App_row__3739U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Form_wrapper__jJ49z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"TodoItemList_wrapper__2UVqs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Filter_wrapper__1SLjn\"};","import React from \"react\";\r\nimport s from '../styles/dist/Form.module.css'\r\n\r\nconst Form = props => {\r\n\r\n    let input = React.createRef();\r\n\r\n    let changeInputValue = () => {\r\n        let text = input.current.value;\r\n        props.changeInputValue(text);\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <input type=\"text\" placeholder='Что еще добавим..?' ref={input} value={props.inputValue} onChange={changeInputValue} />\r\n            <button className='button' onClick={props.addTodo}>Добавить в список</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport s from '../styles/dist/TodoItem.module.css'\r\n\r\n\r\nconst TodoItem = props => {\r\n    let isCompleted = () => {\r\n        if (props.completed === true) return s.completed;\r\n    }\r\n\r\n    let toggleCompleting = (id) => {\r\n        props.toggleCompleting(id)\r\n    }\r\n\r\n    let removeTodo = () => {\r\n        props.removeTodo(props.id)\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.wrapper} onClick={() => (toggleCompleting(props.id))}>\r\n            <div className={isCompleted() + ' ' + s.name}>{props.text}</div>\r\n            <div className={s.right}>\r\n                {props.completed ? <button className={s.lightgreen + ' ' + s.status} >выполнено</button> : <button className={s.lightred + ' ' + s.status} >не выполнено</button>}\r\n                <div className={s.deleteButton} onClick={removeTodo}>&#10006;</div>\r\n            </div>\r\n        </div >\r\n    )\r\n};\r\n\r\nexport default TodoItem;","import React from \"react\";\r\nimport s from '../styles/dist/TodoItemList.module.css'\r\nimport TodoItem from \"./TodoItem\";\r\n\r\n\r\nconst TodoItemList = props => {\r\n\r\n    let itemArray = [];\r\n\r\n    props.todos.forEach(todo => {\r\n        if (props.filter === 'all') {\r\n            itemArray.push(\r\n                <TodoItem key={todo.id} id={todo.id} text={todo.text} removeTodo={props.removeTodo} completed={todo.completed} toggleCompleting={props.toggleCompleting} />\r\n            )\r\n        } else if (props.filter === 'completed' && todo.completed) {\r\n            itemArray.push(\r\n                <TodoItem key={todo.id} id={todo.id} text={todo.text} removeTodo={props.removeTodo} completed={todo.completed} toggleCompleting={props.toggleCompleting} />\r\n            )\r\n        } else if (props.filter === 'uncompleted' && !todo.completed) {\r\n            itemArray.push(\r\n                <TodoItem key={todo.id} id={todo.id} text={todo.text} removeTodo={props.removeTodo} completed={todo.completed} toggleCompleting={props.toggleCompleting} />\r\n            )\r\n        }\r\n    })\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            {itemArray}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TodoItemList;","import React from \"react\";\r\nimport s from '../styles/dist/Filter.module.css'\r\n\r\nconst Filter = props => {\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <label><input type=\"radio\" name='filter' value='all' onChange={props.toggleFilter} checked={props.filter === 'all' ? true : false} />Показать всё</label>\r\n            <label><input type=\"radio\" name='filter' value='completed' onChange={props.toggleFilter} checked={props.filter === 'completed' ? true : false} />Только выполненное</label>\r\n            <label><input type=\"radio\" name='filter' value='uncompleted' onChange={props.toggleFilter} checked={props.filter === 'uncompleted' ? true : false} />Только невыполненное</label>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default Filter;","import s from \"./styles/dist/App.module.css\";\r\nimport React, {useState} from \"react\";\r\nimport Form from \"./components/Form\";\r\nimport TodoItemList from \"./components/TodoItemList\";\r\nimport Filter from \"./components/Filter\";\r\n\r\nfunction App() {\r\n\tconst [todos, setTodos] = useState([\r\n\t\t{id: 0, text: \"Погрызть морковку\", completed: false},\r\n\t\t{id: 1, text: \"Пожарить бумагу\", completed: true},\r\n\t\t{id: 2, text: \"Выгулять тапочки\", completed: false},\r\n\t\t{id: 3, text: \"Лечь спать\", completed: false},\r\n\t]);\r\n\r\n\tconst [filter, setFilter] = useState(\"all\");\r\n\r\n\tconst [inputValue, setInputValue] = useState(\"\");\r\n\r\n\tlet toggleFilter = (e) => {\r\n\t\tsetFilter(e.target.value);\r\n\t};\r\n\r\n\tlet addTodo = () => {\r\n\t\tif (inputValue) {\r\n\t\t\tsetTodos([...todos, {id: Date.now(), text: inputValue, completed: false}]);\r\n\t\t\tsetInputValue(\"\");\r\n\t\t}\r\n\t};\r\n\r\n\tlet changeInputValue = (text) => {\r\n\t\tsetInputValue(text);\r\n\t};\r\n\r\n\tlet toggleCompleting = (id) => {\r\n\t\tsetTodos(\r\n\t\t\ttodos.map((todo) => {\r\n\t\t\t\tif (todo.id === id) {\r\n\t\t\t\t\ttodo.completed = !todo.completed;\r\n\t\t\t\t}\r\n\t\t\t\treturn todo;\r\n\t\t\t})\r\n\t\t);\r\n\t};\r\n\r\n\tlet removeTodo = (id) => {\r\n\t\tlet index = todos.findIndex((todo) => todo.id === id);\r\n\t\tsetTodos(todos.splice(index, 1));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className={s.wrapper}>\r\n\t\t\t<Form inputValue={inputValue} changeInputValue={changeInputValue} addTodo={addTodo} />\r\n\t\t\t<div className={s.row}>\r\n\t\t\t\t<Filter filter={filter} toggleFilter={toggleFilter} />\r\n\t\t\t\t<TodoItemList todos={todos} filter={filter} toggleCompleting={toggleCompleting} removeTodo={removeTodo} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}